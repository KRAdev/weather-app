{"version":3,"sources":["recoil/atoms.js","recoil/selectors.js","components/Header/index.js","api/getWeather.js","components/WeatherCityCard/index.js","components/WeatherCityList/index.js","components/PageAddCity/index.js","components/ChartTemperature/index.js","components/WeatherCityCardFullInfo/index.js","App.js","serviceWorker.js","index.js"],"names":["localStorage","cityList","JSON","stringify","cityListAtom","atom","key","default","parse","addCityError","cityListState","selector","get","list","addCityState","set","newCity","prevList","some","city","id","text","deleteCityState","index","slice","useStyles","makeStyles","theme","root","flexGrow","logoTitle","toYourCitiesBtn","marginRight","addCityBtn","Header","props","history","useHistory","classes","useRecoilValue","useState","anchorEl","setAnchorEl","deleteCity","useSetRecoilState","className","AppBar","position","Toolbar","Typography","variant","length","Button","color","onClick","push","deleteCityBtn","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","map","i","name","API_KEY","getCityByName","query","a","fetch","response","json","data","coord","lat","lon","country","sys","console","log","getWeatherById","getForecastById","maxWidth","media","width","weatherDescription","textTransform","WeatherCityCard","weather","setWeather","getWeather","useEffect","Card","CardActionArea","CardMedia","component","alt","height","image","icon","title","CardContent","gutterBottom","Grid","container","spacing","item","xs","temperature","Math","round","main","temp","weatherMain","description","CircularProgress","CardActions","size","paddingTop","WeatherCityList","CssBaseline","sm","md","formWrapper","padding","display","flexDirection","alignItems","formTitle","marginBottom","textAlign","breakpoints","down","fontSize","submit","marginTop","StartPageAddCity","queryValue","setQueryValue","useRecoilState","queryError","setQueryError","addCity","e","preventDefault","target","value","trim","form","noValidate","onSubmit","TextField","input","required","onChange","fullWidth","label","type","error","helperText","autoFocus","ChartTemperature","chartTemperature","justifyContent","temps","el","min","max","findPercentFromRange","x","r0","r1","Box","hour","percent","hue","px","TemperatureBox","dt","backgroundColor","transform","flexWrap","details","content","characteristicsItem","characteristicsValue","marginLeft","WeatherCityFullInfo","useParams","weatherCharacteristics","characteristicsLabel","feels_like","humidity","wind","speed","temp_min","temp_max","pressure","deg","App","Container","exact","path","to","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1b723a95.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n\r\n\r\nif (!localStorage.cityList) {\r\n    localStorage.cityList = JSON.stringify([])\r\n  }\r\n\r\nexport const cityListAtom = atom({\r\n    key: 'cityListAtom',\r\n    default: JSON.parse(localStorage.cityList)\r\n})\r\n\r\n\r\nexport const addCityError = atom({\r\n  key: 'addCityError',\r\n  default: null\r\n})","import { selector } from 'recoil';\r\nimport { cityListAtom, addCityError} from './atoms'\r\n\r\n\r\nexport const cityListState = selector({\r\n    key: 'cityListSelector',\r\n    get: ({ get }) => {\r\n        const list = get(cityListAtom)\r\n        localStorage.cityList = JSON.stringify(list)\r\n        return list\r\n    },\r\n})\r\nexport const addCityState = selector({\r\n    key: 'addCityState',\r\n    set: ({ set }, newCity) => {\r\n        set(cityListAtom, prevList=>{\r\n            if (!prevList.some(city => city.id === newCity.id)) {\r\n                return [...prevList, newCity]\r\n            } else{\r\n                set(addCityError, {text: 'City already added'})\r\n                return prevList\r\n            }\r\n            \r\n        })\r\n    }\r\n})\r\nexport const deleteCityState = selector({\r\n    key: 'deleteCityState',\r\n    set: ({ set }, index) => {\r\n        set(cityListAtom, prevList=>{\r\n            return [...prevList.slice(0, index), ...prevList.slice(index + 1)]\r\n        })\r\n    }\r\n})\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { cityListState, deleteCityState } from \"../../recoil/selectors\";\r\nimport { useRecoilValue, useSetRecoilState} from 'recoil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  logoTitle: {\r\n    flexGrow: 1,\r\n  },\r\n  toYourCitiesBtn: {\r\n    marginRight: '25px'\r\n  },\r\n  addCityBtn: {\r\n    marginRight: '25px'\r\n  }\r\n}));\r\n\r\nexport default function Header(props) {\r\n  const history = useHistory()\r\n  const classes = useStyles();\r\n  const cityList = useRecoilValue(cityListState)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const deleteCity = useSetRecoilState(deleteCityState)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h4\" className={classes.logoTitle}>\r\n            Weather\r\n          </Typography>\r\n          {!cityList.length ? null : <Button className={classes.toYourCitiesBtn} \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={()=> history.push('/')}\r\n          >\r\n            To your cities\r\n          </Button>}\r\n\r\n          <Button className={classes.addCityBtn} \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={()=> history.push('/add')}\r\n          >\r\n            Add City\r\n          </Button>\r\n          <Button \r\n            className={classes.deleteCityBtn} \r\n            aria-controls=\"delete-city-menu\" \r\n            aria-haspopup=\"true\"\r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={handleClick}\r\n          >\r\n            Delete City\r\n          </Button>\r\n\r\n          <Menu\r\n            id=\"delete-city-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleClose}\r\n          >\r\n            {cityList.length === 0 ? <MenuItem>Nothing to delete</MenuItem> : cityList.map((city, i) => <MenuItem key={city.id} onClick={() => deleteCity(i)}>&times; {city.name}</MenuItem>)}\r\n          </Menu>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","const API_KEY = '0a4ca624b3b6caa5a76be2d1c36ef77d'\r\n\r\nexport async function getCityByName(query) {\r\n  try {\r\n    let response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${API_KEY}`)\r\n    let data = await response.json()\r\n    const city = {\r\n      coord: {\r\n        lat: data.coord.lat,\r\n        lon: data.coord.lon\r\n      },\r\n      name: data.name,\r\n      country: data.sys.country,\r\n      id: data.id\r\n    };\r\n    return city\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false\r\n  }\r\n}\r\nexport async function getWeatherById(id) {\r\n  try {\r\n    let response = await fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${API_KEY}&units=metric`)\r\n    let data = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport async function getForecastById(id) {\r\n  try {\r\n    \r\n    let response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${id}&cnt=8&appid=${API_KEY}&units=metric`)\r\n    let data = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getWeatherById } from '../../api/getWeather'\r\n\r\nimport {\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    width: 'auto'\r\n  },\r\n  weatherDescription: {\r\n    textTransform: 'capitalize'\r\n  }\r\n});\r\n\r\nexport default function WeatherCityCard({ city }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [weather, setWeather] = useState(null)\r\n\r\n\r\n  useEffect(() => {\r\n    getWeather(city)\r\n  }, [])\r\n\r\n  async function getWeather(city) {\r\n    let data = await getWeatherById(city.id)\r\n    setWeather(data)\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={() => history.push(`/city/${city.id}`)}>\r\n        {!weather ? <CircularProgress /> : <>\r\n          <CardMedia\r\n            className={classes.media}\r\n            component=\"img\"\r\n            alt=\"Weather icon\"\r\n            height=\"140\"\r\n            image={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\r\n            title=\"Clear Sky Icon\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {city.name}\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography className={classes.temperature} variant=\"h5\" component=\"h2\">\r\n                  {Math.round(weather.main.temp)} &deg;C\r\n              </Typography>\r\n                <Typography className={classes.weatherMain} variant=\"h4\" component=\"h3\">\r\n                  {weather.weather[0].main}\r\n                </Typography>\r\n                <Typography className={classes.weatherDescription} variant=\"h6\" component=\"h4\">\r\n                  {weather.weather[0].description}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </>}\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={()=>getWeather(city)}>\r\n          Update\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport WeatherCityCard from '../WeatherCityCard'\r\nimport { cityListState } from \"../../recoil/selectors\";\r\nimport { useRecoilValue } from 'recoil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cityList: {\r\n    paddingTop: '40px',\r\n  },\r\n}));\r\n\r\nexport default function WeatherCityList() {\r\n  const classes = useStyles();\r\n  const cityList = useRecoilValue(cityListState)\r\n\r\n  return (\r\n    <div className={classes.cityList}>\r\n      <CssBaseline />\r\n\r\n      <Grid container spacing={3}>\r\n        {cityList.map(city => (\r\n          <Grid key={city.id} item xs={12} sm={6} md={4}>\r\n            <WeatherCityCard city={city}/>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n    </div>\r\n  );\r\n}","import React,{useState} from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { getCityByName } from '../../api/getWeather'\r\nimport { addCityState } from \"../../recoil/selectors\";\r\nimport { addCityError } from \"../../recoil/atoms\";\r\nimport { useSetRecoilState, useRecoilState } from 'recoil';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formWrapper: {\r\n    padding: theme.spacing(4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  formTitle: {\r\n    marginBottom: theme.spacing(5),\r\n    textAlign: 'center',\r\n    [theme.breakpoints.down('sm')]: {\r\n      fontSize: '50px'\r\n    },\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing(4),\r\n    marginRight: theme.spacing(4),\r\n  },\r\n}));\r\n\r\n\r\nexport default function StartPageAddCity() {\r\n  const classes = useStyles();\r\n  const [queryValue, setQueryValue] = useState('')\r\n  const [queryError, setQueryError] = useRecoilState(addCityError)\r\n  const addCity = useSetRecoilState(addCityState)\r\n\r\n  function onChange(event) {\r\n    setQueryValue(event.target.value)\r\n    setQueryError(null)\r\n  }\r\n\r\n  async function getCityName(e) {\r\n    e.preventDefault()\r\n    let query = (e.target.city.value).trim()\r\n    const city = await getCityByName(query)\r\n    if (city) {\r\n      addCity(city)\r\n      setQueryValue('')\r\n    } else {\r\n      setQueryError({text: \"City not found\"})\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formWrapper}>\r\n      <CssBaseline />\r\n\r\n      <Typography variant=\"h1\" className={classes.formTitle}>\r\n        Add your city\r\n        \r\n      </Typography>\r\n      <form className={classes.form} noValidate onSubmit={getCityName}>\r\n        <TextField\r\n          className={classes.input}\r\n          variant=\"outlined\"\r\n          required\r\n          value={queryValue}\r\n          onChange={onChange}\r\n          fullWidth\r\n          id=\"add-city-input\"\r\n          label=\"City Name\"\r\n          type='search'\r\n          name=\"city\"\r\n          error={!!queryError}\r\n          helperText={queryError && queryError.text}\r\n          autoFocus\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nexport default function ChartTemperature({ list }) {\r\n  const chartHeight = 50;\r\n  const boxHeight = 20;\r\n  const useStyles = makeStyles((theme) => ({\r\n    chartTemperature: {\r\n      height: `${chartHeight}px`,\r\n      width: '100%',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'flex-end',\r\n    },\r\n\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  let temps = list.map(el => el.main.temp)\r\n  let min = Math.min(...temps)\r\n  let max = Math.max(...temps)\r\n\r\n  function findPercentFromRange(x, r0, r1) {\r\n    return (x - r0) * 100 / (r1 - r0)\r\n  }\r\n\r\n  function getTemperatureColor(temp) {\r\n    const minTemp = -50\r\n    const maxTemp = 50\r\n    const minHue = 270\r\n    //const maxHue = 0\r\n    if (temp < minTemp) {\r\n      temp = -50\r\n    } else if (temp > maxTemp) {\r\n      temp = 50\r\n    }\r\n    let temperaturePercent = findPercentFromRange(temp, minTemp, maxTemp)\r\n    let hue = ((-1 * minHue / 100) * temperaturePercent) + minHue\r\n    return hue\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.chartTemperature}>\r\n      {list.map(hour => {\r\n        let percent = findPercentFromRange(hour.main.temp, min, max)\r\n        let hue = getTemperatureColor(hour.main.temp)\r\n        let px = (((chartHeight - boxHeight) / 100) * percent) * -1\r\n        return <TemperatureBox key={hour.dt} temp={hour.main.temp} px={px} hue={hue} height={boxHeight}></TemperatureBox>\r\n      })}\r\n    </Box>\r\n  )\r\n}\r\n\r\nfunction TemperatureBox({ temp, px, height, hue}) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    value: {\r\n      width: '12%',\r\n      textAlign: 'center',\r\n      height: `${height}px`,\r\n      backgroundColor: `hsla(${hue}, 100%, 50%, .3)`,\r\n      transform: `translateY(${px}px)`,\r\n      display: 'inline-flex',\r\n      alignItems: 'center'\r\n    }\r\n  }));\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.value}>\r\n      <span>{Math.round(temp)} &deg;C</span>\r\n    </Box>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ChartTemperature from '../ChartTemperature'\r\nimport { getForecastById } from '../../api/getWeather'\r\n\r\nimport {\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexGrow: 1,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    width: 151,\r\n  },\r\n  weatherDescription: {\r\n    textTransform: 'capitalize'\r\n  },\r\n  characteristicsItem: {\r\n    display: 'flex',\r\n  },\r\n  characteristicsValue: {\r\n    marginLeft: '10px',\r\n    marginRight: '20px'\r\n  }\r\n\r\n}));\r\n\r\nexport default function WeatherCityFullInfo() {\r\n  const classes = useStyles();\r\n  let { id } = useParams();\r\n  const [weather, setWeather] = useState(null)\r\n\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      (async () => {\r\n        getWeather(id) \r\n      })()\r\n    }\r\n  }, [])\r\n\r\n  async function getWeather(id) {\r\n    let data = await getForecastById(id)\r\n    setWeather(data)\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      {!weather ? <CircularProgress/> : <>\r\n        <CardMedia\r\n          className={classes.media}\r\n          component=\"img\"\r\n          alt=\"Weather icon\"\r\n          height=\"140\"\r\n          image={`http://openweathermap.org/img/wn/${weather.list[0].weather[0].icon}@2x.png`}\r\n          title=\"Clear Sky Icon\"\r\n        />\r\n\r\n        <div className={classes.details}>\r\n          <CardContent className={classes.content}>\r\n            <Typography gutterBottom variant=\"h2\" component=\"h2\">\r\n              {weather.city.name}\r\n            </Typography>\r\n\r\n\r\n            <Typography className={classes.temperature} variant=\"h3\" component=\"h2\">\r\n              {Math.round(weather.list[0].main.temp)} &deg;C\r\n              </Typography>\r\n            <Typography className={classes.weatherMain} variant=\"h2\" component=\"h3\">\r\n              {weather.list[0].weather[0].main}\r\n            </Typography>\r\n            <Typography className={classes.weatherDescription} variant=\"h4\" component=\"h4\">\r\n              {weather.list[0].weather[0].description}\r\n            </Typography>\r\n\r\n\r\n            <Grid container spacing={0}>\r\n              <Grid item xs={12} sm={6}>\r\n                <dl className={classes.weatherCharacteristics}>\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Feels Like:</dt>\r\n                    <dd className={classes.characteristicsValue}>{Math.round(weather.list[0].main.feels_like)} &deg;C</dd>\r\n                  </div>\r\n\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Humidity:</dt>\r\n                    <dd className={classes.characteristicsValue}>{Math.round(weather.list[0].main.humidity)} %</dd>\r\n                  </div>\r\n\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Wind Speed:</dt>\r\n                    <dd className={classes.characteristicsValue}>{weather.list[0].wind.speed} mps</dd>\r\n                  </div>\r\n                </dl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <dl className={classes.weatherCharacteristics}>\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Min:</dt>\r\n                    <dd className={classes.characteristicsValue}>{Math.round(weather.list[0].main.temp_min)} &deg;C</dd>\r\n                    <dt className={classes.characteristicsLabel}>Max:</dt>\r\n                    <dd className={classes.characteristicsValue}>{Math.round(weather.list[0].main.temp_max)} &deg;C</dd>\r\n                  </div>\r\n\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Pressure:</dt>\r\n                    <dd className={classes.characteristicsValue}>{weather.list[0].main.pressure} Pa</dd>\r\n                  </div>\r\n\r\n                  <div className={classes.characteristicsItem}>\r\n                    <dt className={classes.characteristicsLabel}>Wind Degree:</dt>\r\n                    <dd className={classes.characteristicsValue}>{weather.list[0].wind.deg} &deg;</dd>\r\n                  </div>\r\n                </dl>\r\n              </Grid>\r\n\r\n            </Grid>\r\n\r\n            <ChartTemperature list={weather.list} />\r\n\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => getWeather(id)}>\r\n              Update\r\n          </Button>\r\n          </CardActions>\r\n        </div></>}\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header'\nimport WeatherCityList from './components/WeatherCityList'\nimport PageAddCity from './components/PageAddCity'\nimport WeatherCityFullInfo from './components/WeatherCityCardFullInfo'\n\nimport {\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport { cityListState } from \"./recoil/selectors\";\nimport { useRecoilValue } from 'recoil';\n\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  const cityList = useRecoilValue(cityListState)\n  return (\n    <>  \n      <Header/>\n      <Container maxWidth=\"md\">\n        <Switch>\n          <Route exact path=\"/\">\n            {!cityList.length ? <PageAddCity/> : <WeatherCityList/> }\n          </Route>\n          <Route path=\"/city/:id\">\n            <WeatherCityFullInfo/>\n          </Route>\n          <Route path=\"/add\">\n            <PageAddCity/>\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </Container>     \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RecoilRoot } from 'recoil';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <App />\n      </Router>\n    </RecoilRoot>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}